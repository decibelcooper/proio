// This is a general event model to store truth-level information from Monte Carlo models
syntax = "proto2";
package proio.model.mc;
option go_package = "github.com/decibelcooper/proio/go-proio/model/mc";
option java_package = "proio.model";
option java_outer_classname = "Mc";

// This message is for general Monte Carlo generators.
message MCParameters {
    // event number
    optional uint64 number = 1;
    // process ID
    optional int32 processid = 2;
    // event weight
    optional double weight = 3;
    // keep metadata as key-value (int)
    repeated KeyValueI int_map = 4;
    // keep metadata as key-value (double)
    repeated KeyValueD double_map = 5;
    // keep double array 
    repeated double double_array = 6;
    // keep int array
    repeated sint64 int_array  = 7;
}

// map to store arbitrary data as key-int value 
message KeyValueI {
    // key for integer value
    required string key = 1;
    // value
    repeated sint32 value = 2;
}

// map to store arbitrary data as key-double value 
message KeyValueD {
    // key for double value
    required string key = 1;
    // value
    repeated double value = 2;
}

// This block is only for Pythia8.
message Pythia8Parameters {   
    optional double weight_sum = 1;
    optional double merging_weight = 2;
    // transverse momentum
    optional double pt_hat = 3;
    optional double alpha_em = 4;
    optional double alpha_s = 5;
    // Q-scale used in evaluation of PDF’s (in GeV)
    optional double scale_q_fac = 6;
    // fraction of beam momentum carried by first parton (”beam side”)
    optional double x1 = 7;
    // fraction of beam momentum carried by second parton (”target side”)
    optional double x2 = 8;
    // flavour code of first parton
    optional uint64 id1 = 9;
    // flavour code of second parton
    optional uint64 id2 = 10;
}

message Particle {
    // ProIO entry identifiers that point to parent Particles
    repeated uint64 parent = 1;
    // ProIO entry identifiers that point to child Particles
    repeated uint64 child = 2;
    // PDG code
    optional sint32 pdg = 3;
    // position in mm and time in ns
    optional XYZT vertex = 4;
    // momentum in GeV
    optional P4 p = 5;
    // mass in GeV
    optional float mass = 6;
    // charge in units of 3*charge 
    optional sint32 charge = 7;
    // 2 *spin + 1
    optional sint32 spin = 8;
    //status code
    optional sint32 status = 9;
    // barcode
    optional sint32 barcode= 10; 
}

// keep X,Y,Z,Time
message XYZT {
    optional float x = 1;
    optional float y = 2;
    optional float z = 3;
    optional float t = 4;
}
// keep 4-momenta in GeV 
message P4 {
    optional float px = 1;
    optional float py = 2;
    optional float pz = 3;
    optional float e = 4;
}
