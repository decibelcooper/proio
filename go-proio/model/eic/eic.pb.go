// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proio/model/eic.proto

/*
	Package eic is a generated protocol buffer package.

	It is generated from these files:
		proio/model/eic.proto

	It has these top-level messages:
		Particle
		SimHit
		Observation
		ObservedPos
		RandVar
		XYZTD
		XYZTF
		XYZD
		XYZF
*/
package eic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RandVar_Distribution int32

const (
	RandVar_NORMAL  RandVar_Distribution = 0
	RandVar_UNIFORM RandVar_Distribution = 1
)

var RandVar_Distribution_name = map[int32]string{
	0: "NORMAL",
	1: "UNIFORM",
}
var RandVar_Distribution_value = map[string]int32{
	"NORMAL":  0,
	"UNIFORM": 1,
}

func (x RandVar_Distribution) String() string {
	return proto.EnumName(RandVar_Distribution_name, int32(x))
}
func (RandVar_Distribution) EnumDescriptor() ([]byte, []int) { return fileDescriptorEic, []int{4, 0} }

// truth-level particle
type Particle struct {
	// ProIO entry identifiers that point to parent Particles
	Parent []uint64 `protobuf:"varint,1,rep,packed,name=parent" json:"parent,omitempty"`
	// ProIO entry identifiers that point to child Particles
	Child []uint64 `protobuf:"varint,2,rep,packed,name=child" json:"child,omitempty"`
	// PDG code
	Pdg int32 `protobuf:"zigzag32,3,opt,name=pdg,proto3" json:"pdg,omitempty"`
	// position in mm and time in ns
	Vertex *XYZTD `protobuf:"bytes,4,opt,name=vertex" json:"vertex,omitempty"`
	// momentum in GeV
	P *XYZD `protobuf:"bytes,5,opt,name=p" json:"p,omitempty"`
	// mass in GeV
	Mass float64 `protobuf:"fixed64,6,opt,name=mass,proto3" json:"mass,omitempty"`
	// charge in units of e
	Charge float32 `protobuf:"fixed32,7,opt,name=charge,proto3" json:"charge,omitempty"`
	Spin   *XYZF   `protobuf:"bytes,8,opt,name=spin" json:"spin,omitempty"`
}

func (m *Particle) Reset()                    { *m = Particle{} }
func (m *Particle) String() string            { return proto.CompactTextString(m) }
func (*Particle) ProtoMessage()               {}
func (*Particle) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{0} }

func (m *Particle) GetParent() []uint64 {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Particle) GetChild() []uint64 {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *Particle) GetPdg() int32 {
	if m != nil {
		return m.Pdg
	}
	return 0
}

func (m *Particle) GetVertex() *XYZTD {
	if m != nil {
		return m.Vertex
	}
	return nil
}

func (m *Particle) GetP() *XYZD {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *Particle) GetMass() float64 {
	if m != nil {
		return m.Mass
	}
	return 0
}

func (m *Particle) GetCharge() float32 {
	if m != nil {
		return m.Charge
	}
	return 0
}

func (m *Particle) GetSpin() *XYZF {
	if m != nil {
		return m.Spin
	}
	return nil
}

// raw simulation output
type SimHit struct {
	// optional ID to circumvent volume lookup from global position during
	// digitization
	Volumeid uint64 `protobuf:"varint,1,opt,name=volumeid,proto3" json:"volumeid,omitempty"`
	// spatial in mm and time in ns
	Globalprepos *XYZTD `protobuf:"bytes,2,opt,name=globalprepos" json:"globalprepos,omitempty"`
	// spatial in mm and time in ns
	Globalpostpos *XYZTD `protobuf:"bytes,3,opt,name=globalpostpos" json:"globalpostpos,omitempty"`
	// energy in GeV
	Edep float32 `protobuf:"fixed32,4,opt,name=edep,proto3" json:"edep,omitempty"`
	// "particle" is a ProIO entry identifier that points to the Particle
	// responsible for this hit.
	Particle uint64 `protobuf:"varint,5,opt,name=particle,proto3" json:"particle,omitempty"`
}

func (m *SimHit) Reset()                    { *m = SimHit{} }
func (m *SimHit) String() string            { return proto.CompactTextString(m) }
func (*SimHit) ProtoMessage()               {}
func (*SimHit) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{1} }

func (m *SimHit) GetVolumeid() uint64 {
	if m != nil {
		return m.Volumeid
	}
	return 0
}

func (m *SimHit) GetGlobalprepos() *XYZTD {
	if m != nil {
		return m.Globalprepos
	}
	return nil
}

func (m *SimHit) GetGlobalpostpos() *XYZTD {
	if m != nil {
		return m.Globalpostpos
	}
	return nil
}

func (m *SimHit) GetEdep() float32 {
	if m != nil {
		return m.Edep
	}
	return 0
}

func (m *SimHit) GetParticle() uint64 {
	if m != nil {
		return m.Particle
	}
	return 0
}

// fundamental object used in reconstruction
type Observation struct {
	// optional ID for identifying the cell that this hit came from
	Cellid uint64 `protobuf:"varint,1,opt,name=cellid,proto3" json:"cellid,omitempty"`
	// energy in GeV
	Edep float32 `protobuf:"fixed32,2,opt,name=edep,proto3" json:"edep,omitempty"`
	// sigma value for normally-distributed noise (GeV)
	Edepnoise float32 `protobuf:"fixed32,3,opt,name=edepnoise,proto3" json:"edepnoise,omitempty"`
	// Multiple possible positions can be specified.
	Pos []*ObservedPos `protobuf:"bytes,4,rep,name=pos" json:"pos,omitempty"`
	// "source"s are ProIO entry identifiers that may point to either SimHits
	// or Particles responsible for the ReconHit.
	Source []uint64 `protobuf:"varint,5,rep,packed,name=source" json:"source,omitempty"`
}

func (m *Observation) Reset()                    { *m = Observation{} }
func (m *Observation) String() string            { return proto.CompactTextString(m) }
func (*Observation) ProtoMessage()               {}
func (*Observation) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{2} }

func (m *Observation) GetCellid() uint64 {
	if m != nil {
		return m.Cellid
	}
	return 0
}

func (m *Observation) GetEdep() float32 {
	if m != nil {
		return m.Edep
	}
	return 0
}

func (m *Observation) GetEdepnoise() float32 {
	if m != nil {
		return m.Edepnoise
	}
	return 0
}

func (m *Observation) GetPos() []*ObservedPos {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Observation) GetSource() []uint64 {
	if m != nil {
		return m.Source
	}
	return nil
}

// position with detailed noise
type ObservedPos struct {
	// spatial in mm and time in ns
	Mean *XYZTD `protobuf:"bytes,1,opt,name=mean" json:"mean,omitempty"`
	// These RandVars describe independent random noise contributions, and
	// repeated RandVars imply addition, or alternatively a convolution of
	// their distributions.  The contributions must combine to span the full
	// 4-dimensional space, so the number of contributions must be >= 4.
	Noise []*RandVar `protobuf:"bytes,2,rep,name=noise" json:"noise,omitempty"`
	// "weightmod" describes additional weight to be applied to this position.
	// For the case of multiple possible positions, it is implied that by
	// default each position is equally likely.  This can be changed by adding
	// weight to positions.  To make one position twice as likely as a position
	// without a weight modifier, set weightmod to +1.
	Weightmod float32 `protobuf:"fixed32,3,opt,name=weightmod,proto3" json:"weightmod,omitempty"`
}

func (m *ObservedPos) Reset()                    { *m = ObservedPos{} }
func (m *ObservedPos) String() string            { return proto.CompactTextString(m) }
func (*ObservedPos) ProtoMessage()               {}
func (*ObservedPos) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{3} }

func (m *ObservedPos) GetMean() *XYZTD {
	if m != nil {
		return m.Mean
	}
	return nil
}

func (m *ObservedPos) GetNoise() []*RandVar {
	if m != nil {
		return m.Noise
	}
	return nil
}

func (m *ObservedPos) GetWeightmod() float32 {
	if m != nil {
		return m.Weightmod
	}
	return 0
}

// random variable with a specified distribution along an axis defined in XYZT
type RandVar struct {
	Dist RandVar_Distribution `protobuf:"varint,2,opt,name=dist,proto3,enum=proio.model.eic.RandVar_Distribution" json:"dist,omitempty"`
	// spatial in mm and time in ns
	Sigma *XYZTF `protobuf:"bytes,3,opt,name=sigma" json:"sigma,omitempty"`
}

func (m *RandVar) Reset()                    { *m = RandVar{} }
func (m *RandVar) String() string            { return proto.CompactTextString(m) }
func (*RandVar) ProtoMessage()               {}
func (*RandVar) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{4} }

func (m *RandVar) GetDist() RandVar_Distribution {
	if m != nil {
		return m.Dist
	}
	return RandVar_NORMAL
}

func (m *RandVar) GetSigma() *XYZTF {
	if m != nil {
		return m.Sigma
	}
	return nil
}

type XYZTD struct {
	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	T float64 `protobuf:"fixed64,4,opt,name=t,proto3" json:"t,omitempty"`
}

func (m *XYZTD) Reset()                    { *m = XYZTD{} }
func (m *XYZTD) String() string            { return proto.CompactTextString(m) }
func (*XYZTD) ProtoMessage()               {}
func (*XYZTD) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{5} }

func (m *XYZTD) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *XYZTD) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *XYZTD) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *XYZTD) GetT() float64 {
	if m != nil {
		return m.T
	}
	return 0
}

type XYZTF struct {
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	T float32 `protobuf:"fixed32,4,opt,name=t,proto3" json:"t,omitempty"`
}

func (m *XYZTF) Reset()                    { *m = XYZTF{} }
func (m *XYZTF) String() string            { return proto.CompactTextString(m) }
func (*XYZTF) ProtoMessage()               {}
func (*XYZTF) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{6} }

func (m *XYZTF) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *XYZTF) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *XYZTF) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *XYZTF) GetT() float32 {
	if m != nil {
		return m.T
	}
	return 0
}

type XYZD struct {
	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *XYZD) Reset()                    { *m = XYZD{} }
func (m *XYZD) String() string            { return proto.CompactTextString(m) }
func (*XYZD) ProtoMessage()               {}
func (*XYZD) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{7} }

func (m *XYZD) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *XYZD) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *XYZD) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type XYZF struct {
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *XYZF) Reset()                    { *m = XYZF{} }
func (m *XYZF) String() string            { return proto.CompactTextString(m) }
func (*XYZF) ProtoMessage()               {}
func (*XYZF) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{8} }

func (m *XYZF) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *XYZF) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *XYZF) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func init() {
	proto.RegisterType((*Particle)(nil), "proio.model.eic.Particle")
	proto.RegisterType((*SimHit)(nil), "proio.model.eic.SimHit")
	proto.RegisterType((*Observation)(nil), "proio.model.eic.Observation")
	proto.RegisterType((*ObservedPos)(nil), "proio.model.eic.ObservedPos")
	proto.RegisterType((*RandVar)(nil), "proio.model.eic.RandVar")
	proto.RegisterType((*XYZTD)(nil), "proio.model.eic.XYZTD")
	proto.RegisterType((*XYZTF)(nil), "proio.model.eic.XYZTF")
	proto.RegisterType((*XYZD)(nil), "proio.model.eic.XYZD")
	proto.RegisterType((*XYZF)(nil), "proio.model.eic.XYZF")
	proto.RegisterEnum("proio.model.eic.RandVar_Distribution", RandVar_Distribution_name, RandVar_Distribution_value)
}
func (m *Particle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Particle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Parent) > 0 {
		dAtA2 := make([]byte, len(m.Parent)*10)
		var j1 int
		for _, num := range m.Parent {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintEic(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Child) > 0 {
		dAtA4 := make([]byte, len(m.Child)*10)
		var j3 int
		for _, num := range m.Child {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintEic(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Pdg != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEic(dAtA, i, uint64((uint32(m.Pdg)<<1)^uint32((m.Pdg>>31))))
	}
	if m.Vertex != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Vertex.Size()))
		n5, err := m.Vertex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.P != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.P.Size()))
		n6, err := m.P.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Mass != 0 {
		dAtA[i] = 0x31
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.Mass))))
	}
	if m.Charge != 0 {
		dAtA[i] = 0x3d
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Charge))))
	}
	if m.Spin != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Spin.Size()))
		n7, err := m.Spin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *SimHit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimHit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Volumeid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Volumeid))
	}
	if m.Globalprepos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Globalprepos.Size()))
		n8, err := m.Globalprepos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Globalpostpos != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Globalpostpos.Size()))
		n9, err := m.Globalpostpos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Edep != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Edep))))
	}
	if m.Particle != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Particle))
	}
	return i, nil
}

func (m *Observation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Observation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cellid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Cellid))
	}
	if m.Edep != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Edep))))
	}
	if m.Edepnoise != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Edepnoise))))
	}
	if len(m.Pos) > 0 {
		for _, msg := range m.Pos {
			dAtA[i] = 0x22
			i++
			i = encodeVarintEic(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Source) > 0 {
		dAtA11 := make([]byte, len(m.Source)*10)
		var j10 int
		for _, num := range m.Source {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEic(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	return i, nil
}

func (m *ObservedPos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObservedPos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mean != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Mean.Size()))
		n12, err := m.Mean.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.Noise) > 0 {
		for _, msg := range m.Noise {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEic(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Weightmod != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Weightmod))))
	}
	return i, nil
}

func (m *RandVar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandVar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dist != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Dist))
	}
	if m.Sigma != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Sigma.Size()))
		n13, err := m.Sigma.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *XYZTD) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZTD) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.X))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.Y))))
	}
	if m.Z != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.Z))))
	}
	if m.T != 0 {
		dAtA[i] = 0x21
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.T))))
	}
	return i, nil
}

func (m *XYZTF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZTF) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.X))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Y))))
	}
	if m.Z != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Z))))
	}
	if m.T != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.T))))
	}
	return i, nil
}

func (m *XYZD) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZD) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.X))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.Y))))
	}
	if m.Z != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.Z))))
	}
	return i, nil
}

func (m *XYZF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZF) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.X))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Y))))
	}
	if m.Z != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Z))))
	}
	return i, nil
}

func encodeFixed64Eic(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Eic(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEic(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Particle) Size() (n int) {
	var l int
	_ = l
	if len(m.Parent) > 0 {
		l = 0
		for _, e := range m.Parent {
			l += sovEic(uint64(e))
		}
		n += 1 + sovEic(uint64(l)) + l
	}
	if len(m.Child) > 0 {
		l = 0
		for _, e := range m.Child {
			l += sovEic(uint64(e))
		}
		n += 1 + sovEic(uint64(l)) + l
	}
	if m.Pdg != 0 {
		n += 1 + sozEic(uint64(m.Pdg))
	}
	if m.Vertex != nil {
		l = m.Vertex.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.P != nil {
		l = m.P.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.Mass != 0 {
		n += 9
	}
	if m.Charge != 0 {
		n += 5
	}
	if m.Spin != nil {
		l = m.Spin.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	return n
}

func (m *SimHit) Size() (n int) {
	var l int
	_ = l
	if m.Volumeid != 0 {
		n += 1 + sovEic(uint64(m.Volumeid))
	}
	if m.Globalprepos != nil {
		l = m.Globalprepos.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.Globalpostpos != nil {
		l = m.Globalpostpos.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.Edep != 0 {
		n += 5
	}
	if m.Particle != 0 {
		n += 1 + sovEic(uint64(m.Particle))
	}
	return n
}

func (m *Observation) Size() (n int) {
	var l int
	_ = l
	if m.Cellid != 0 {
		n += 1 + sovEic(uint64(m.Cellid))
	}
	if m.Edep != 0 {
		n += 5
	}
	if m.Edepnoise != 0 {
		n += 5
	}
	if len(m.Pos) > 0 {
		for _, e := range m.Pos {
			l = e.Size()
			n += 1 + l + sovEic(uint64(l))
		}
	}
	if len(m.Source) > 0 {
		l = 0
		for _, e := range m.Source {
			l += sovEic(uint64(e))
		}
		n += 1 + sovEic(uint64(l)) + l
	}
	return n
}

func (m *ObservedPos) Size() (n int) {
	var l int
	_ = l
	if m.Mean != nil {
		l = m.Mean.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if len(m.Noise) > 0 {
		for _, e := range m.Noise {
			l = e.Size()
			n += 1 + l + sovEic(uint64(l))
		}
	}
	if m.Weightmod != 0 {
		n += 5
	}
	return n
}

func (m *RandVar) Size() (n int) {
	var l int
	_ = l
	if m.Dist != 0 {
		n += 1 + sovEic(uint64(m.Dist))
	}
	if m.Sigma != nil {
		l = m.Sigma.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	return n
}

func (m *XYZTD) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	if m.Z != 0 {
		n += 9
	}
	if m.T != 0 {
		n += 9
	}
	return n
}

func (m *XYZTF) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	if m.Z != 0 {
		n += 5
	}
	if m.T != 0 {
		n += 5
	}
	return n
}

func (m *XYZD) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	if m.Z != 0 {
		n += 9
	}
	return n
}

func (m *XYZF) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	if m.Z != 0 {
		n += 5
	}
	return n
}

func sovEic(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEic(x uint64) (n int) {
	return sovEic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Particle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Particle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Particle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Parent = append(m.Parent, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Parent = append(m.Parent, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Child = append(m.Child, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Child = append(m.Child, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pdg", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Pdg = v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vertex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vertex == nil {
				m.Vertex = &XYZTD{}
			}
			if err := m.Vertex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.P == nil {
				m.P = &XYZD{}
			}
			if err := m.P.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Mass = float64(math.Float64frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charge", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Charge = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spin == nil {
				m.Spin = &XYZF{}
			}
			if err := m.Spin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimHit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimHit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimHit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volumeid", wireType)
			}
			m.Volumeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volumeid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Globalprepos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Globalprepos == nil {
				m.Globalprepos = &XYZTD{}
			}
			if err := m.Globalprepos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Globalpostpos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Globalpostpos == nil {
				m.Globalpostpos = &XYZTD{}
			}
			if err := m.Globalpostpos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edep", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Edep = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Particle", wireType)
			}
			m.Particle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Particle |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Observation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Observation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Observation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cellid", wireType)
			}
			m.Cellid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cellid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edep", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Edep = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edepnoise", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Edepnoise = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pos = append(m.Pos, &ObservedPos{})
			if err := m.Pos[len(m.Pos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Source = append(m.Source, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Source = append(m.Source, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObservedPos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObservedPos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObservedPos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mean == nil {
				m.Mean = &XYZTD{}
			}
			if err := m.Mean.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Noise = append(m.Noise, &RandVar{})
			if err := m.Noise[len(m.Noise)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weightmod", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Weightmod = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandVar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RandVar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RandVar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dist", wireType)
			}
			m.Dist = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dist |= (RandVar_Distribution(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sigma", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sigma == nil {
				m.Sigma = &XYZTF{}
			}
			if err := m.Sigma.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZTD) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZTD: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZTD: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.X = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Y = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Z = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.T = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZTF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZTF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZTF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Y = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Z = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.T = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZD) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZD: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZD: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.X = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Y = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Z = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Y = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Z = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEic
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEic
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEic(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEic = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEic   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proio/model/eic.proto", fileDescriptorEic) }

var fileDescriptorEic = []byte{
	// 624 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6a, 0xd4, 0x40,
	0x14, 0xee, 0x49, 0xb2, 0xdb, 0x7a, 0xb6, 0x6a, 0x1d, 0x6c, 0x09, 0x52, 0x96, 0x10, 0x11, 0xa3,
	0x68, 0x56, 0xeb, 0x95, 0x22, 0x88, 0xa5, 0x2e, 0x0a, 0xf6, 0x87, 0xd1, 0x8a, 0xf6, 0x2e, 0x9b,
	0x0c, 0xd9, 0x81, 0x64, 0x27, 0x24, 0xb3, 0xb5, 0xed, 0x0b, 0xf8, 0x0a, 0x82, 0x17, 0xbe, 0x8e,
	0x57, 0xe2, 0x23, 0x48, 0x7d, 0x07, 0xaf, 0x65, 0x4e, 0xd2, 0x6d, 0xb7, 0xb5, 0x45, 0xaf, 0x76,
	0xbe, 0xc3, 0x77, 0xbe, 0xf3, 0x9d, 0x2f, 0xb3, 0x83, 0x8b, 0x45, 0xa9, 0xa4, 0xea, 0xe5, 0x2a,
	0x11, 0x59, 0x4f, 0xc8, 0x38, 0x2c, 0x4a, 0xa5, 0x15, 0xbb, 0x4a, 0xe5, 0x90, 0xca, 0xa1, 0x90,
	0xb1, 0xff, 0x1b, 0x70, 0x6e, 0x2b, 0x2a, 0xb5, 0x8c, 0x33, 0xc1, 0x96, 0xb0, 0x5d, 0x44, 0xa5,
	0x18, 0x69, 0x17, 0x3c, 0x3b, 0x70, 0x78, 0x83, 0xd8, 0x75, 0x6c, 0xc5, 0x43, 0x99, 0x25, 0xae,
	0x45, 0xe5, 0x1a, 0xb0, 0x05, 0xb4, 0x8b, 0x24, 0x75, 0x6d, 0x0f, 0x82, 0x6b, 0xdc, 0x1c, 0x59,
	0x88, 0xed, 0x5d, 0x51, 0x6a, 0xb1, 0xe7, 0x3a, 0x1e, 0x04, 0x9d, 0x95, 0xa5, 0xf0, 0xd4, 0xb8,
	0xf0, 0xfd, 0x87, 0x9d, 0xb7, 0x6b, 0xbc, 0x61, 0xb1, 0x9b, 0x08, 0x85, 0xdb, 0x22, 0xea, 0xe2,
	0xdf, 0xa8, 0x6b, 0x1c, 0x0a, 0xc6, 0xd0, 0xc9, 0xa3, 0xaa, 0x72, 0xdb, 0x1e, 0x04, 0xc0, 0xe9,
	0x6c, 0x8c, 0xc6, 0xc3, 0xa8, 0x4c, 0x85, 0x3b, 0xeb, 0x41, 0x60, 0xf1, 0x06, 0xb1, 0x3b, 0xe8,
	0x54, 0x85, 0x1c, 0xb9, 0x73, 0xe7, 0x6b, 0xf6, 0x39, 0x51, 0xfc, 0xef, 0x80, 0xed, 0x37, 0x32,
	0x7f, 0x29, 0x35, 0xbb, 0x81, 0x73, 0xbb, 0x2a, 0x1b, 0xe7, 0x42, 0x26, 0x2e, 0x78, 0x10, 0x38,
	0x7c, 0x82, 0xd9, 0x13, 0x9c, 0x4f, 0x33, 0x35, 0x88, 0xb2, 0xa2, 0x14, 0x85, 0xaa, 0x5c, 0xeb,
	0xc2, 0xc5, 0xa6, 0xb8, 0xec, 0x29, 0x5e, 0x6e, 0xb0, 0xaa, 0xb4, 0x69, 0xb6, 0x2f, 0x6c, 0x9e,
	0x26, 0x9b, 0xbd, 0x45, 0x22, 0x0a, 0x8a, 0xd2, 0xe2, 0x74, 0x36, 0x4e, 0x8b, 0xe6, 0x63, 0x51,
	0x6e, 0x0e, 0x9f, 0x60, 0xff, 0x2b, 0x60, 0x67, 0x73, 0x50, 0x89, 0x72, 0x37, 0xd2, 0x52, 0x8d,
	0x28, 0x23, 0x91, 0x65, 0x93, 0x9d, 0x1a, 0x34, 0xd1, 0xb5, 0x4e, 0xe8, 0x2e, 0xe3, 0x25, 0xf3,
	0x3b, 0x52, 0xb2, 0x12, 0xe4, 0xd2, 0xe2, 0xc7, 0x05, 0x16, 0xa2, 0x6d, 0xdc, 0x3b, 0x9e, 0x1d,
	0x74, 0x56, 0x96, 0xcf, 0xb8, 0xaf, 0x87, 0x8a, 0x64, 0x4b, 0x55, 0xdc, 0x10, 0xcd, 0xe4, 0x4a,
	0x8d, 0xcb, 0xd8, 0x78, 0xa4, 0x6b, 0x54, 0x23, 0xff, 0xd3, 0xc4, 0x21, 0x91, 0xd9, 0x5d, 0x74,
	0x72, 0x11, 0x8d, 0xc8, 0xdf, 0xf9, 0xb1, 0x10, 0x87, 0x85, 0xd8, 0xaa, 0xdd, 0x59, 0xe4, 0xc2,
	0x3d, 0x43, 0xe6, 0xd1, 0x28, 0x79, 0x17, 0x95, 0xbc, 0xa6, 0x99, 0x8d, 0x3e, 0x0a, 0x99, 0x0e,
	0x75, 0xae, 0x92, 0xa3, 0x8d, 0x26, 0x05, 0xff, 0x0b, 0xe0, 0x6c, 0xd3, 0xc0, 0x1e, 0xa3, 0x93,
	0xc8, 0x4a, 0x53, 0x1e, 0x57, 0x56, 0x6e, 0x9d, 0x27, 0x1c, 0xae, 0xc9, 0x4a, 0x97, 0x72, 0x30,
	0x36, 0xe1, 0x72, 0x6a, 0x61, 0xf7, 0xb0, 0x55, 0xc9, 0x34, 0x8f, 0x2e, 0xfc, 0xb0, 0x7d, 0x5e,
	0x93, 0xfc, 0xdb, 0x38, 0x7f, 0x52, 0x83, 0x21, 0xb6, 0x37, 0x36, 0xf9, 0xfa, 0xf3, 0xd7, 0x0b,
	0x33, 0xac, 0x83, 0xb3, 0xdb, 0x1b, 0xaf, 0xfa, 0x9b, 0x7c, 0x7d, 0x01, 0xfc, 0x67, 0xd8, 0xa2,
	0xd5, 0xd9, 0x3c, 0xc2, 0x1e, 0xa5, 0x03, 0x1c, 0xf6, 0x0c, 0xda, 0x27, 0x97, 0xc0, 0x61, 0xdf,
	0xa0, 0x03, 0x9a, 0x0b, 0x1c, 0x0e, 0x0c, 0xd2, 0x74, 0x53, 0x80, 0x83, 0x3e, 0x12, 0xe8, 0x1f,
	0x0b, 0x58, 0x53, 0x02, 0xd6, 0x94, 0x80, 0x35, 0x25, 0x60, 0x19, 0x81, 0x07, 0xe8, 0x98, 0xbf,
	0xdf, 0xbf, 0x1b, 0x68, 0x3a, 0xfe, 0x63, 0xe2, 0xea, 0xf6, 0xb7, 0xc3, 0x2e, 0xfc, 0x38, 0xec,
	0xc2, 0xcf, 0xc3, 0x2e, 0x7c, 0xfe, 0xd5, 0x9d, 0xc1, 0xce, 0x89, 0xf8, 0x56, 0xed, 0x17, 0x32,
	0xde, 0x79, 0x98, 0x4a, 0x3d, 0x1c, 0x0f, 0xc2, 0x58, 0xe5, 0xbd, 0x44, 0xc4, 0x72, 0x20, 0xb2,
	0x58, 0xa9, 0x42, 0x94, 0xbd, 0xfa, 0x79, 0x4b, 0xd5, 0xfd, 0x53, 0xef, 0xdc, 0xa0, 0x4d, 0x0f,
	0xdd, 0xa3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x86, 0xd2, 0x70, 0x6e, 0x01, 0x05, 0x00, 0x00,
}
