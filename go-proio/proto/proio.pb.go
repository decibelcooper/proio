// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proio/proto/proio.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		proio/proto/proio.proto

	It has these top-level messages:
		BucketHeader
		Tag
		Any
		Event
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type BucketHeader_CompType int32

const (
	BucketHeader_NONE BucketHeader_CompType = 0
	BucketHeader_GZIP BucketHeader_CompType = 1
	BucketHeader_LZ4  BucketHeader_CompType = 2
)

var BucketHeader_CompType_name = map[int32]string{
	0: "NONE",
	1: "GZIP",
	2: "LZ4",
}
var BucketHeader_CompType_value = map[string]int32{
	"NONE": 0,
	"GZIP": 1,
	"LZ4":  2,
}

func (x BucketHeader_CompType) String() string {
	return proto1.EnumName(BucketHeader_CompType_name, int32(x))
}
func (BucketHeader_CompType) EnumDescriptor() ([]byte, []int) { return fileDescriptorProio, []int{0, 0} }

type BucketHeader_BucketType int32

const (
	BucketHeader_EVENTS BucketHeader_BucketType = 0
	BucketHeader_FOOTER BucketHeader_BucketType = 1
)

var BucketHeader_BucketType_name = map[int32]string{
	0: "EVENTS",
	1: "FOOTER",
}
var BucketHeader_BucketType_value = map[string]int32{
	"EVENTS": 0,
	"FOOTER": 1,
}

func (x BucketHeader_BucketType) String() string {
	return proto1.EnumName(BucketHeader_BucketType_name, int32(x))
}
func (BucketHeader_BucketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorProio, []int{0, 1}
}

type BucketHeader struct {
	NEvents         uint64                  `protobuf:"varint,1,opt,name=nEvents,proto3" json:"nEvents,omitempty"`
	BucketSize      uint64                  `protobuf:"varint,2,opt,name=bucketSize,proto3" json:"bucketSize,omitempty"`
	Compression     BucketHeader_CompType   `protobuf:"varint,3,opt,name=compression,proto3,enum=proio.proto.BucketHeader_CompType" json:"compression,omitempty"`
	Type            BucketHeader_BucketType `protobuf:"varint,4,opt,name=type,proto3,enum=proio.proto.BucketHeader_BucketType" json:"type,omitempty"`
	FileDescriptors [][]byte                `protobuf:"bytes,5,rep,name=fileDescriptors" json:"fileDescriptors,omitempty"`
	Metadata        map[string][]byte       `protobuf:"bytes,7,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BucketHeader) Reset()                    { *m = BucketHeader{} }
func (m *BucketHeader) String() string            { return proto1.CompactTextString(m) }
func (*BucketHeader) ProtoMessage()               {}
func (*BucketHeader) Descriptor() ([]byte, []int) { return fileDescriptorProio, []int{0} }

func (m *BucketHeader) GetNEvents() uint64 {
	if m != nil {
		return m.NEvents
	}
	return 0
}

func (m *BucketHeader) GetBucketSize() uint64 {
	if m != nil {
		return m.BucketSize
	}
	return 0
}

func (m *BucketHeader) GetCompression() BucketHeader_CompType {
	if m != nil {
		return m.Compression
	}
	return BucketHeader_NONE
}

func (m *BucketHeader) GetType() BucketHeader_BucketType {
	if m != nil {
		return m.Type
	}
	return BucketHeader_EVENTS
}

func (m *BucketHeader) GetFileDescriptors() [][]byte {
	if m != nil {
		return m.FileDescriptors
	}
	return nil
}

func (m *BucketHeader) GetMetadata() map[string][]byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Tag struct {
	Entries []uint64 `protobuf:"varint,1,rep,packed,name=entries" json:"entries,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto1.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptorProio, []int{1} }

func (m *Tag) GetEntries() []uint64 {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Any struct {
	Type    uint64 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Any) Reset()                    { *m = Any{} }
func (m *Any) String() string            { return proto1.CompactTextString(m) }
func (*Any) ProtoMessage()               {}
func (*Any) Descriptor() ([]byte, []int) { return fileDescriptorProio, []int{2} }

func (m *Any) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Any) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Event struct {
	Tags      map[string]*Tag   `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	NEntries  uint64            `protobuf:"varint,2,opt,name=nEntries,proto3" json:"nEntries,omitempty"`
	Entries   map[uint64]*Any   `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	NTypes    uint64            `protobuf:"varint,4,opt,name=nTypes,proto3" json:"nTypes,omitempty"`
	Types     map[uint64]string `protobuf:"bytes,5,rep,name=types" json:"types,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp uint64            `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto1.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorProio, []int{3} }

func (m *Event) GetTags() map[string]*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Event) GetNEntries() uint64 {
	if m != nil {
		return m.NEntries
	}
	return 0
}

func (m *Event) GetEntries() map[uint64]*Any {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *Event) GetNTypes() uint64 {
	if m != nil {
		return m.NTypes
	}
	return 0
}

func (m *Event) GetTypes() map[uint64]string {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *Event) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto1.RegisterType((*BucketHeader)(nil), "proio.proto.BucketHeader")
	proto1.RegisterType((*Tag)(nil), "proio.proto.Tag")
	proto1.RegisterType((*Any)(nil), "proio.proto.Any")
	proto1.RegisterType((*Event)(nil), "proio.proto.Event")
	proto1.RegisterEnum("proio.proto.BucketHeader_CompType", BucketHeader_CompType_name, BucketHeader_CompType_value)
	proto1.RegisterEnum("proio.proto.BucketHeader_BucketType", BucketHeader_BucketType_name, BucketHeader_BucketType_value)
}
func (m *BucketHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NEvents != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.NEvents))
	}
	if m.BucketSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.BucketSize))
	}
	if m.Compression != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.Compression))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.Type))
	}
	if len(m.FileDescriptors) > 0 {
		for _, b := range m.FileDescriptors {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintProio(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x3a
			i++
			v := m.Metadata[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovProio(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovProio(uint64(len(k))) + byteSize
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintProio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProio(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	return i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		dAtA2 := make([]byte, len(m.Entries)*10)
		var j1 int
		for _, num := range m.Entries {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintProio(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *Any) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Any) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.Type))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProio(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0xa
			i++
			v := m.Tags[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovProio(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovProio(uint64(len(k))) + msgSize
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintProio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProio(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if m.NEntries != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.NEntries))
	}
	if len(m.Entries) > 0 {
		for k, _ := range m.Entries {
			dAtA[i] = 0x1a
			i++
			v := m.Entries[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovProio(uint64(msgSize))
			}
			mapSize := 1 + sovProio(uint64(k)) + msgSize
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintProio(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProio(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	if m.NTypes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.NTypes))
	}
	if len(m.Types) > 0 {
		for k, _ := range m.Types {
			dAtA[i] = 0x2a
			i++
			v := m.Types[k]
			mapSize := 1 + sovProio(uint64(k)) + 1 + len(v) + sovProio(uint64(len(v)))
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintProio(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintProio(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func encodeVarintProio(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BucketHeader) Size() (n int) {
	var l int
	_ = l
	if m.NEvents != 0 {
		n += 1 + sovProio(uint64(m.NEvents))
	}
	if m.BucketSize != 0 {
		n += 1 + sovProio(uint64(m.BucketSize))
	}
	if m.Compression != 0 {
		n += 1 + sovProio(uint64(m.Compression))
	}
	if m.Type != 0 {
		n += 1 + sovProio(uint64(m.Type))
	}
	if len(m.FileDescriptors) > 0 {
		for _, b := range m.FileDescriptors {
			l = len(b)
			n += 1 + l + sovProio(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovProio(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovProio(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Tag) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		l = 0
		for _, e := range m.Entries {
			l += sovProio(uint64(e))
		}
		n += 1 + sovProio(uint64(l)) + l
	}
	return n
}

func (m *Any) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovProio(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovProio(uint64(l))
	}
	return n
}

func (m *Event) Size() (n int) {
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProio(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovProio(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	if m.NEntries != 0 {
		n += 1 + sovProio(uint64(m.NEntries))
	}
	if len(m.Entries) > 0 {
		for k, v := range m.Entries {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProio(uint64(l))
			}
			mapEntrySize := 1 + sovProio(uint64(k)) + l
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	if m.NTypes != 0 {
		n += 1 + sovProio(uint64(m.NTypes))
	}
	if len(m.Types) > 0 {
		for k, v := range m.Types {
			_ = k
			_ = v
			mapEntrySize := 1 + sovProio(uint64(k)) + 1 + len(v) + sovProio(uint64(len(v)))
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	if m.Timestamp != 0 {
		n += 1 + sovProio(uint64(m.Timestamp))
	}
	return n
}

func sovProio(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProio(x uint64) (n int) {
	return sovProio(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BucketHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NEvents", wireType)
			}
			m.NEvents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NEvents |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketSize", wireType)
			}
			m.BucketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			m.Compression = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compression |= (BucketHeader_CompType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (BucketHeader_BucketType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileDescriptors", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileDescriptors = append(m.FileDescriptors, make([]byte, postIndex-iNdEx))
			copy(m.FileDescriptors[len(m.FileDescriptors)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProio
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthProio
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Entries = append(m.Entries, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProio
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Entries = append(m.Entries, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Any) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Any: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Any: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]*Tag)
			}
			var mapkey string
			var mapvalue *Tag
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProio
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Tag{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NEntries", wireType)
			}
			m.NEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NEntries |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entries == nil {
				m.Entries = make(map[uint64]*Any)
			}
			var mapkey uint64
			var mapvalue *Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Entries[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NTypes", wireType)
			}
			m.NTypes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NTypes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Types == nil {
				m.Types = make(map[uint64]string)
			}
			var mapkey uint64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthProio
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Types[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProio(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProio
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProio
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProio
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProio(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProio = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProio   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("proio/proto/proio.proto", fileDescriptorProio) }

var fileDescriptorProio = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x6b, 0x3b, 0x3f, 0x93, 0x00, 0xd6, 0x0a, 0x81, 0x15, 0x95, 0x34, 0xb2, 0x2a, 0x9a,
	0x4b, 0x5d, 0x94, 0x70, 0x08, 0x70, 0x6a, 0x5a, 0x03, 0x95, 0xda, 0xa4, 0x72, 0x2d, 0x0e, 0xb9,
	0x6d, 0x9c, 0xc5, 0x58, 0x8d, 0xbd, 0x96, 0xbd, 0xa9, 0x64, 0x9e, 0x84, 0xf7, 0xe1, 0xc2, 0x09,
	0xf1, 0x08, 0x28, 0xbc, 0x08, 0xf2, 0xae, 0x93, 0x6c, 0x50, 0x2a, 0x71, 0xb1, 0xe7, 0x9b, 0x9d,
	0xf9, 0xe6, 0xe7, 0x5b, 0x2d, 0x3c, 0x4f, 0x52, 0x1a, 0xd2, 0xd3, 0x24, 0xa5, 0x8c, 0x7f, 0x43,
	0x6a, 0x73, 0x1b, 0x35, 0x24, 0x60, 0x7d, 0x57, 0xa1, 0x39, 0x5c, 0xf8, 0x77, 0x84, 0x7d, 0x24,
	0x78, 0x46, 0x52, 0x64, 0x42, 0x35, 0x76, 0xee, 0x49, 0xcc, 0x32, 0x53, 0xe9, 0x28, 0x5d, 0xcd,
	0x5d, 0x41, 0xd4, 0x06, 0x98, 0xf2, 0xc8, 0xdb, 0xf0, 0x2b, 0x31, 0xf7, 0xf9, 0xa1, 0xe4, 0x41,
	0x17, 0xd0, 0xf0, 0x69, 0x94, 0xa4, 0x24, 0xcb, 0x42, 0x1a, 0x9b, 0x6a, 0x47, 0xe9, 0x3e, 0xee,
	0x59, 0xb6, 0x54, 0xcd, 0x96, 0x2b, 0xd9, 0xe7, 0x34, 0x4a, 0xbc, 0x3c, 0x21, 0xae, 0x9c, 0x86,
	0x06, 0xa0, 0xb1, 0x3c, 0x21, 0xa6, 0xc6, 0xd3, 0x8f, 0x1e, 0x4e, 0x17, 0x80, 0x13, 0xf0, 0x0c,
	0xd4, 0x85, 0x27, 0x9f, 0xc3, 0x39, 0xb9, 0x20, 0x99, 0x9f, 0x86, 0x09, 0xa3, 0x69, 0x66, 0xea,
	0x1d, 0xb5, 0xdb, 0x74, 0xff, 0x75, 0xa3, 0x73, 0xa8, 0x45, 0x84, 0xe1, 0x19, 0x66, 0xd8, 0xac,
	0x76, 0xd4, 0x6e, 0xa3, 0x77, 0xfc, 0x70, 0x9d, 0xeb, 0x32, 0xd2, 0x89, 0x59, 0x9a, 0xbb, 0xeb,
	0xc4, 0xd6, 0x3b, 0x78, 0xb4, 0x75, 0x84, 0x0c, 0x50, 0xef, 0x48, 0xce, 0xb7, 0x56, 0x77, 0x0b,
	0x13, 0x3d, 0x05, 0xfd, 0x1e, 0xcf, 0x17, 0x62, 0x59, 0x4d, 0x57, 0x80, 0xb7, 0xfb, 0x03, 0xc5,
	0x3a, 0x86, 0xda, 0x6a, 0x7c, 0x54, 0x03, 0x6d, 0x34, 0x1e, 0x39, 0xc6, 0x5e, 0x61, 0x7d, 0x98,
	0x5c, 0xde, 0x18, 0x0a, 0xaa, 0x82, 0x7a, 0x35, 0x79, 0x6d, 0xec, 0x5b, 0x47, 0x00, 0x9b, 0x41,
	0x11, 0x40, 0xc5, 0xf9, 0xe4, 0x8c, 0xbc, 0x5b, 0x63, 0xaf, 0xb0, 0xdf, 0x8f, 0xc7, 0x9e, 0xe3,
	0x1a, 0x8a, 0x75, 0x08, 0xaa, 0x87, 0x83, 0x42, 0x3b, 0x12, 0xb3, 0x34, 0x24, 0x85, 0x76, 0x6a,
	0xa1, 0x5d, 0x09, 0xad, 0x3e, 0xa8, 0x67, 0x71, 0x8e, 0x50, 0xb9, 0x5c, 0xa1, 0xac, 0x58, 0x9b,
	0x09, 0xd5, 0x04, 0xe7, 0x73, 0x8a, 0x67, 0x65, 0x9b, 0x2b, 0x68, 0xfd, 0x54, 0x41, 0xe7, 0xda,
	0xa3, 0x57, 0xa0, 0x31, 0x1c, 0x08, 0xd6, 0x46, 0xef, 0x60, 0x6b, 0x59, 0x3c, 0xc2, 0xf6, 0x70,
	0x90, 0x89, 0x0d, 0xf1, 0x48, 0xd4, 0x82, 0x5a, 0xec, 0x94, 0xbd, 0x88, 0xab, 0xb2, 0xc6, 0xe8,
	0xcd, 0xa6, 0x4d, 0x95, 0x13, 0x1e, 0xee, 0x20, 0x2c, 0x83, 0x05, 0xe7, 0x2a, 0x1e, 0x3d, 0x83,
	0x4a, 0x5c, 0x6c, 0x22, 0xe3, 0xf7, 0x43, 0x73, 0x4b, 0x84, 0xfa, 0xa0, 0x33, 0xee, 0xd6, 0x39,
	0xe1, 0x8b, 0x5d, 0x1d, 0x16, 0xe7, 0x82, 0x4e, 0xc4, 0xa2, 0x03, 0xa8, 0xb3, 0x30, 0x22, 0x19,
	0xc3, 0x51, 0x62, 0x56, 0x38, 0xdf, 0xc6, 0xd1, 0xba, 0x84, 0xfa, 0x7a, 0xa8, 0x1d, 0xda, 0xbe,
	0x94, 0xb5, 0x6d, 0xf4, 0x8c, 0xad, 0x8a, 0x1e, 0x0e, 0x24, 0xb5, 0x5b, 0x57, 0xd0, 0x94, 0xc7,
	0x91, 0xd9, 0xb4, 0xff, 0x60, 0x3b, 0x8b, 0x73, 0x99, 0x6d, 0x00, 0xb0, 0x99, 0x65, 0x07, 0xd7,
	0xd6, 0xad, 0xab, 0x4b, 0x99, 0xc3, 0xeb, 0x1f, 0xcb, 0xb6, 0xf2, 0x6b, 0xd9, 0x56, 0x7e, 0x2f,
	0xdb, 0xca, 0xb7, 0x3f, 0xed, 0x3d, 0xd0, 0x79, 0x9d, 0xa1, 0x7e, 0x53, 0x14, 0x9a, 0x9c, 0x04,
	0x21, 0xfb, 0xb2, 0x98, 0xda, 0x3e, 0x8d, 0x4e, 0x67, 0xc4, 0x0f, 0xa7, 0x64, 0xee, 0x53, 0x9a,
	0x90, 0x54, 0xbc, 0x1f, 0xa7, 0x01, 0x3d, 0x91, 0x1e, 0x95, 0x69, 0x85, 0xff, 0xfa, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xfb, 0xd8, 0xe0, 0xea, 0x6a, 0x04, 0x00, 0x00,
}
